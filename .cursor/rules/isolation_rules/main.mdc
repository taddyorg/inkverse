---
description: main rule
globs: main.mdc
alwaysApply: false
---
# üîç INKVERSE MONOREPO SYSTEM

> **TL;DR:** This system is designed to work with Cursor custom modes for a monorepo containing multiple applications: React website, React Native mobile app, GraphQL server, and worker node service.

## üß≠ MODE-SPECIFIC VISUAL MAPS

```mermaid
graph TD
    subgraph Modes["Cursor Custom Modes"]
        VAN["VAN MODE<br>Initialization"] --> PLAN["PLAN MODE<br>Task Planning"]
        PLAN --> Creative["CREATIVE MODE<br>Design Decisions"]
        Creative --> Implement["IMPLEMENT MODE<br>Code Implementation"]
        Implement --> Reflect["REFLECT MODE<br>Task Review"]
        Reflect --> Archive["ARCHIVE MODE<br>Documentation"]
    end
    
    VAN -.->|"Loads"| VANRules["‚Ä¢ main.md<br>‚Ä¢ platform-awareness.md<br>‚Ä¢ file-verification.md<br>‚Ä¢ workflow-init.md"]
    PLAN -.->|"Loads"| PLANRules["‚Ä¢ main.md<br>‚Ä¢ task-tracking.md<br>‚Ä¢ planning-process.md"]
    Creative -.->|"Loads"| CreativeRules["‚Ä¢ main.md<br>‚Ä¢ creative-phase.md<br>‚Ä¢ design-patterns.md"]
    Implement -.->|"Loads"| ImplementRules["‚Ä¢ main.md<br>‚Ä¢ command-execution.md<br>‚Ä¢ implementation-guide.md"]
    Reflect -.->|"Loads"| ReflectRules["‚Ä¢ main.md<br>‚Ä¢ reflection-format.md"]
    Archive -.->|"Loads"| ArchiveRules["‚Ä¢ main.md<br>‚Ä¢ archiving-guide.md"]
```

## üìö VISUAL PROCESS MAPS

Each mode has its own visual process map:

- [VAN Mode Map](mdc:visual-maps/van-mode-map.md)
- [PLAN Mode Map](mdc:visual-maps/plan-mode-map.md)
- [CREATIVE Mode Map](mdc:visual-maps/creative-mode-map.md)
- [IMPLEMENT Mode Map](mdc:visual-maps/implement-mode-map.md)
- [REFLECT Mode Map](mdc:visual-maps/reflect-mode-map.md)
- [ARCHIVE Mode Map](mdc:visual-maps/archive-mode-map.md)

## üîÑ MONOREPO STRUCTURE

This project is organized as a monorepo with these primary applications:

```mermaid
graph TD
    subgraph "Inkverse Monorepo"
        website["Website<br>React + Router"]
        reactNative["iOS and Android Mobile Apps<br>React Native + Expo"]
        graphql["GraphQL Server<br>Node.js + Apollo Server"]
        worker["Worker<br>Event-driven services"]
        cloud["Cloud Services<br>Cloudflare Workers"]
        
        website -->|"Uses API from"| graphql
        reactNative -->|"Uses API from"| graphql
        graphql -->|"Triggers events for"| worker
        worker -->|"Updates data in"| graphql
        cloud -->|"Provides edge services for"| website & reactNative
    end
```

## üîÑ FILE STATE VERIFICATION

In this isolation-focused approach, Memory Bank files maintain continuity between modes:

```mermaid
graph TD
    subgraph "Memory Bank Files"
        tasks["tasks.md<br>Source of Truth"]
        active["activeContext.md<br>Current Focus"]
        creative["creative-*.md<br>Design Decisions"]
        progress["progress.md<br>Implementation Status"]
    end
    
    VAN["VAN MODE"] -->|"Creates/Updates"| tasks
    VAN -->|"Creates/Updates"| active
    
    PLAN["PLAN MODE"] -->|"Reads"| tasks
    PLAN -->|"Reads"| active
    PLAN -->|"Updates"| tasks
    
    Creative["CREATIVE MODE"] -->|"Reads"| tasks
    Creative -->|"Creates"| creative
    Creative -->|"Updates"| tasks
    
    Implement["IMPLEMENT MODE"] -->|"Reads"| tasks
    Implement -->|"Reads"| creative
    Implement -->|"Updates"| tasks
    Implement -->|"Updates"| progress
    
    Reflect["REFLECT MODE"] -->|"Reads"| tasks
    Reflect -->|"Reads"| progress
    Reflect -->|"Updates"| tasks
    
    Archive["ARCHIVE MODE"] -->|"Reads"| tasks
    Archive -->|"Reads"| progress
    Archive -->|"Archives"| creative
```

## üìã MODE TRANSITION PROTOCOL

```mermaid
sequenceDiagram
    participant User
    participant CurrentMode
    participant NextMode
    
    CurrentMode->>CurrentMode: Complete Phase Requirements
    CurrentMode->>User: "Phase complete. NEXT MODE: [mode name]"
    User->>CurrentMode: End Current Mode
    User->>NextMode: Start Next Mode
    NextMode->>NextMode: Verify Required File State
    
    alt File State Valid
        NextMode->>User: "Continuing from previous mode..."
    else File State Invalid
        NextMode->>User: "Required files not in expected state"
        NextMode->>User: "Return to [previous mode] to complete requirements"
    end
```

## üíª PLATFORM-SPECIFIC COMMANDS

| Action | Windows | Mac/Linux |
|-----|---|-----|
| Create file | `echo. > file.ext` | `touch file.ext` |
| Create directory | `mkdir directory` | `mkdir -p directory` |
| Change directory | `cd directory` | `cd directory` |
| List files | `dir` | `ls` |
| Show file content | `type file.ext` | `cat file.ext` |

## üì¶ APPLICATION DEVELOPMENT COMMANDS

| Application | Setup | Development | Build |
|-----|---|-----|-----|
| Website | `cd website && yarn` | `cd website && yarn dev` | `cd website && yarn build` |
| React Native | `cd react-native && yarn` | `cd react-native && yarn start` | `cd react-native && yarn build` |
| GraphQL Server | `cd graphql-server && yarn` | `cd graphql-server && yarn dev` | `cd graphql-server && yarn build` |
| Worker | `cd worker && yarn` | N/A (event-driven) | `cd worker && yarn build` |

## ‚ö†Ô∏è COMMAND EFFICIENCY GUIDANCE

For optimal performance, use efficient command chaining when appropriate:

```
# Efficient command chaining examples:
mkdir -p project/{src,tests,docs} && cd project
grep "TODO" $(find . -name "*.[jt]s" -o -name "*.[jt]sx") # Find TODOs in JS/TS files
yarn install && yarn start
```

Refer to [command-execution.md](mdc:Core/command-execution.md) for detailed guidance. 